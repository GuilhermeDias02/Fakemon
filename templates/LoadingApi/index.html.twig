{% extends 'base.html.twig' %}


        {% block body %}

<style>
  .selected {
    background-color: #4CAF50; /* Couleur de fond lorsque le bouton est sélectionné */
    color: white; /* Couleur du texte lorsque le bouton est sélectionné */
  }
</style>

        <h1>Pokemon Api</h1>
        <div>
<a href="{{ path('pokemon_add') }}">
    <button class="button">Ajouter</button>
</a>
</div>

<div>
<h2>Filtre par region</h2>
<button class="button" id="allFilterRegion" class="region-filter-button selected">All</button>

<button class="button" id="johtoFilter" class="region-filter-button">Johto</button>

<button class="button" id="kantoFilter" class="region-filter-button">Kanto</button>

<button class="button" id="sinnohFilter" class="region-filter-button">Sinnoh</button>

<button class="button" id="unysFilter" class="region-filter-button">Unys</button>

<button class="button" id="nullFilterRegion" class="region-filter-button">Aucun (-)</button>
</div>

<h2>Filtre par Type</h2>
<button class="button" id="allFilterType">All</button>

<button class="button" id="fireFilter">Feu</button>

<button class="button" id="waterFilter">Eau</button>

<button class="button" id="plantFilter">Plante</button>

<button class="button" id="fighterFilter">Combat</button>

<button class="button" id="nullFilterType">Aucun (-)</button>
</div>


<div id="pokemonListContainer" style="padding: 50px;">
            </div>


    <button class="button-view">Clear</button>

<div id="pokemonViewContainer" style="max-width: 60%; margin: 0 auto;">
</div>

            
{% endblock %}

{% block javascripts %}
    {% block script %}
        <script>

        document.addEventListener("DOMContentLoaded", function() {
            var pokemons = [];
        var apiUrl = 'http://127.0.0.1:8000/api/pokema';
        var regionFilterButtons = document.querySelectorAll('.region-filter-button');
        var filtreRegionVar = [];
         var filtreTypeVar = [];



    document.getElementById('allFilterRegion').classList.add('selected');
    document.getElementById('allFilterType').classList.add('selected');


     document.querySelector('.button-view').addEventListener('click', function() {
    var containerElementView = document.getElementById('pokemonViewContainer');
    containerElementView.innerHTML = '';
});

        document.getElementById('allFilterRegion').addEventListener('click', function() {
            fetchPokemons();
    clearFilterRegion();
    this.classList.add('selected');
            
        });


    document.getElementById('johtoFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
          filtreRegionVar = [];
        filtreRegionVar.push("johto");
                fetchPokemonsByFilter();

         clearFilterRegion();

    this.classList.add('selected');
      


    });

       document.getElementById('nullFilterRegion').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
           filtreRegionVar = [];
        filtreRegionVar.push("-");
        fetchPokemonsByFilter();
         clearFilterRegion();
    this.classList.add('selected');
    });

        document.getElementById('kantoFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
         filtreRegionVar = [];
        filtreRegionVar.push("kanto");
        fetchPokemonsByFilter();
        
         clearFilterRegion();

    this.classList.add('selected');
    });

               document.getElementById('sinnohFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
         filtreRegionVar = [];
        filtreRegionVar.push("sinnoh");

        fetchPokemonsByFilter();
        
         clearFilterRegion();

    this.classList.add('selected');
    });

     document.getElementById('unysFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
         filtreRegionVar = [];
        filtreRegionVar.push("unys");

        fetchPokemonsByFilter();
        
         clearFilterRegion();

    this.classList.add('selected');
    });


        document.getElementById('allFilterType').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
           filtreTypeVar = [];
        fetchPokemons();

        
         clearFilterType();

    this.classList.add('selected');
        
    });


       document.getElementById('nullFilterType').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
               filtreTypeVar = [];
        filtreTypeVar.push("-");
        fetchPokemonsByFilter();
        
         clearFilterType();

    this.classList.add('selected');
    });


   

         document.getElementById('fireFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
               filtreTypeVar = [];
        filtreTypeVar.push("fire");
        fetchPokemonsByFilter();
        
         clearFilterType();

    this.classList.add('selected');
    });

             document.getElementById('waterFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
             filtreTypeVar = [];
        filtreTypeVar.push("water");
        fetchPokemonsByFilter();
        
         clearFilterType();

    this.classList.add('selected');
    });

                 document.getElementById('plantFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
          filtreTypeVar = [];
        filtreTypeVar.push("plant");
        fetchPokemonsByFilter();
        
         clearFilterType();

    this.classList.add('selected');
    });

                    document.getElementById('fighterFilter').addEventListener('click', function() {
        // Toggle between "-" and "johto" when the button is clicked
          filtreTypeVar = [];
        filtreTypeVar.push("fighter");
        fetchPokemonsByFilter();
        
         clearFilterType();

    this.classList.add('selected');
    });


    function clearFilterRegion() {
document.getElementById('allFilterRegion').classList.remove('selected');
document.getElementById('sinnohFilter').classList.remove('selected');
document.getElementById('nullFilterRegion').classList.remove('selected');
document.getElementById('kantoFilter').classList.remove('selected');
document.getElementById('johtoFilter').classList.remove('selected');
document.getElementById('unysFilter').classList.remove('selected');

}

    function clearFilterType() {
document.getElementById('allFilterType').classList.remove('selected');
document.getElementById('fireFilter').classList.remove('selected');
document.getElementById('nullFilterType').classList.remove('selected');
document.getElementById('waterFilter').classList.remove('selected');
document.getElementById('plantFilter').classList.remove('selected');
document.getElementById('fighterFilter').classList.remove('selected');

}

function fetchPokemonsByFilter() {
    fetch(apiUrl)
        .then(response => response.json())
        .then(data => {
            console.log(filtreRegionVar[0]);
            if(filtreRegionVar.length > 0 && filtreTypeVar.length > 0){
            pokemons = data['hydra:member'].filter(pokemon => 
    pokemon.region === filtreRegionVar[0] && pokemon.type === filtreTypeVar[0]
);
            }else if(filtreRegionVar.length > 0 && filtreTypeVar.length == 0){
            pokemons = data['hydra:member'].filter(pokemon => pokemon.region === filtreRegionVar[0]);
            }else if(filtreRegionVar.length == 0 && filtreTypeVar.length > 0){
            pokemons = data['hydra:member'].filter(pokemon => pokemon.type === filtreTypeVar[0]);
            }else{
            pokemons = data['hydra:member']; // Assurez-vous que la structure des données correspond à ce que vous attendez

            }

            console.log(`Pokemons récupérés depuis l'API avec filtre':`, pokemons);
            displayPokemonsList(pokemons);
        })
        .catch(error => console.error(`Erreur lors de la récupération des pokemons depuis l'API avec filtre ':`, error));
}

            function fetchPokemons() {
                fetch(apiUrl)
                    .then(response => response.json())
                    .then(data => {
                        // Mettez à jour la variable pokemons avec les données de l'API
                        pokemons = data['hydra:member']; // Assurez-vous que la structure des données correspond à ce que vous attendez
                        console.log("Pokemons récupérés depuis l'API :", pokemons);
   
                        // Ajoutez ici le code pour manipuler les données des pokemons et les afficher dans votre interface
                        displayPokemonsList(pokemons);
                    })
                    .catch(error => console.error('Erreur lors de la récupération des pokemons depuis l\'API:', error));
            }

        


function displayPokemonsList(pokemons) {
    // Créez un élément de tableau (table)
    var pokemonTableElement = document.createElement('table');
    pokemonTableElement.className = 'pokemon-table';

  
    // Créez l'en-tête du tableau
    var headerRow = document.createElement('tr');
    for (var prop in pokemons[0]) {
        var headerCell = document.createElement('th');
        headerCell.textContent = prop;
        headerRow.appendChild(headerCell);
    }   

    var actionsHeaderCell = document.createElement('th');
    actionsHeaderCell.textContent = 'Actions';
    headerRow.appendChild(actionsHeaderCell);

    pokemonTableElement.appendChild(headerRow);

    // Parcourez le tableau de pokemons et créez des lignes pour chaque pokemon
    pokemons.forEach(function (pokemon) {
        var dataRow = document.createElement('tr');

        // Pour chaque propriété du pokemon, créez une cellule de données
        for (var prop in pokemon) {
            var dataCell = document.createElement('td');
            dataCell.textContent = pokemon[prop];
            dataRow.appendChild(dataCell);
        }

        var actionsCell = document.createElement('td');

      var deleteButton = document.createElement('button');
        deleteButton.textContent = 'Supprimer';
        deleteButton.addEventListener('click', function() {
            console.log("nous allons suprrimer " + pokemon.name);
                deletePokemon(pokemon.id);
                    pokemonTableElement.deleteRow(dataRow.rowIndex);
  });


         var editButton = document.createElement('button');
    editButton.textContent = 'Modifier';
    editButton.addEventListener('click', function () {
        // Appel de la fonction pour modifier le pokemon avec l'ID correspondant
        console.log('Modifier le pokemon avec ID :', pokemon.id);
            window.location.href = "{{ path('pokemon_modify', {id: 'POKEMON_ID'}) }}".replace('POKEMON_ID', pokemon.id);

    });
      var viewButton = document.createElement('button');
    viewButton.textContent = 'Voir';
    viewButton.addEventListener('click', function () {
        // Appel de la fonction pour voir le pokemon avec l'ID correspondant
        console.log('Voir le pokemon avec ID :', pokemon.id);
                viewPokemon(pokemon.id);


    });
        
        deleteButton.style.marginRight = '2px';
        viewButton.style.marginRight = '2px'; 
            
        actionsCell.appendChild(deleteButton);
        actionsCell.appendChild(viewButton);
        actionsCell.appendChild(editButton);

        dataRow.appendChild(actionsCell);

    
        pokemonTableElement.appendChild(dataRow);
    });



    // Ajoutez des styles de bordure
    pokemonTableElement.style.borderCollapse = 'collapse';
    pokemonTableElement.style.width = '100%';

    // Style pour les cellules du tableau
    var tableCells = pokemonTableElement.querySelectorAll('th, td');
    tableCells.forEach(function (cell) {
        cell.style.border = '1px solid #ddd';
        cell.style.padding = '8px';
        cell.style.textAlign = 'left';
    });

    // Sélectionnez l'élément HTML où vous souhaitez afficher le tableau
    var containerElement = document.getElementById('pokemonListContainer');


    // Vérifiez si l'élément existe avant de l'ajouter
    if (containerElement) {
        
        containerElement.innerHTML = '';
        containerElement.appendChild(pokemonTableElement);

        if (pokemons.length === 0) {
                var noPokemonRow = document.createElement('tr');
                var noPokemonCell = document.createElement('td');
                noPokemonCell.colSpan = 2; // Span across all columns
                noPokemonCell.textContent = 'Aucun Pokémon trouvé';
                noPokemonRow.appendChild(noPokemonCell);
                containerElement.appendChild(noPokemonRow);
            }


    }
}
            fetchPokemons();
        });


       // Function to delete a Pokémon by ID
function deletePokemon(pokemonId) {
  // Display a confirmation dialog
  var isConfirmed = confirm("Voulez-vous vraiment supprimer ce Pokémon ?");

  if (isConfirmed) {
    // Make a DELETE request to your API endpoint
    fetch(`http://127.0.0.1:8000/api/pokema/${pokemonId}`, {
      method: 'DELETE',
      headers: {
          'Content-Type': 'application/ld+json', // Set the content type to application/ld+json
        // You might need to include additional headers like authentication
      },
    })
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        console.log(`Pokemon with ID ${pokemonId} deleted successfully`);

      })
      .catch(error => console.error('Error deleting Pokemon:', error));
  }
}

function viewPokemon(id) {
        var containerElementView = document.getElementById('pokemonViewContainer');

    fetch(`http://127.0.0.1:8000/api/pokema/${id}`, {
      method: 'GET',
      headers: {
          'Content-Type': 'application/ld+json', // Set the content type to application/ld+json
        // You might need to include additional headers like authentication
      },
    })        .then(response => response.json())
        .then(data => {
            // Create a Bootstrap modal
            var modal = document.createElement('div');
            modal.innerHTML = `
                <div class="modal-dialog" role="document" id="${data.name}#${data.idPokedex}">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">${data.name} - #${data.idPokedex}</h5>
                            <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                                <span aria-hidden="true">&times;</span>
                            </button>
                        </div>
                        <div class="modal-body">
                            <p>ID: ${data.id}</p>
                            <p>Type: ${data.type}</p>
                            <p>Type 2: ${data.type2 || '-'}</p>
                            <!-- Add more details here based on your data structure -->
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                        </div>
                    </div>
                </div>
            `;
                    containerElementView.appendChild(modal);

        }


        )
}


        </script>

    {% endblock %}
  {% endblock %}
